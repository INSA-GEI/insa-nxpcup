   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.main,"ax",%progbits
  18              		.align	2
  19              		.global	main
  20              		.code	16
  21              		.thumb_func
  23              	main:
  24              	.LFB0:
  25              		.file 1 "../Sources/main.c"
   1:../Sources/main.c **** /****************************************************************************
   2:../Sources/main.c ****  * Project developed as a simple Blink the LED's to 
   3:../Sources/main.c ****  * demonstrate basic CodeWarrior functionality and capability.
   4:../Sources/main.c ****  * Borrowed from Freedom Example Projects: Blinky
   5:../Sources/main.c ****  * 
   6:../Sources/main.c ****  * Date: 11 Sept 2012
   7:../Sources/main.c ****  * Author: M. Ruthenbeck
   8:../Sources/main.c ****  * Revision Level 1.0
   9:../Sources/main.c ****  */
  10:../Sources/main.c **** 
  11:../Sources/main.c **** #include <MKL25Z4.h>
  12:../Sources/main.c **** #include "Debug.h"
  13:../Sources/main.c **** #include "afficheur7.h"
  14:../Sources/main.c **** 
  15:../Sources/main.c **** #define SLOW_BLINK      (10000000)
  16:../Sources/main.c **** #define FAST_BLINK      (500000)
  17:../Sources/main.c **** #define BLINK_DELAY     FAST_BLINK
  18:../Sources/main.c **** 
  19:../Sources/main.c **** void clock_init();
  20:../Sources/main.c **** void delay_time(int);
  21:../Sources/main.c **** int main (void)
  22:../Sources/main.c **** {
  26              		.loc 1 22 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
  23:../Sources/main.c **** 	clock_init();
  39              		.loc 1 23 0
  40 0006 FFF7FEFF 		bl	clock_init
  24:../Sources/main.c **** 	int i=0;
  41              		.loc 1 24 0
  42 000a 0023     		mov	r3, #0
  43 000c 7B60     		str	r3, [r7, #4]
  25:../Sources/main.c **** 	debug_init();
  44              		.loc 1 25 0
  45 000e FFF7FEFF 		bl	debug_init
  26:../Sources/main.c **** 	DEBUG_GREEN_OFF;
  46              		.loc 1 26 0
  47 0012 0E4B     		ldr	r3, .L3
  48 0014 0D4A     		ldr	r2, .L3
  49 0016 5268     		ldr	r2, [r2, #4]
  50 0018 8021     		mov	r1, #128
  51 001a 0903     		lsl	r1, r1, #12
  52 001c 0A43     		orr	r2, r1
  53 001e 5A60     		str	r2, [r3, #4]
  54              	.L2:
  27:../Sources/main.c **** 	while(1){
  28:../Sources/main.c **** 		
  29:../Sources/main.c **** 		
  30:../Sources/main.c **** 		/* ########## TEST AFFICHEUR LCD ########## */
  31:../Sources/main.c **** 		send_data(1);
  55              		.loc 1 31 0
  56 0020 0120     		mov	r0, #1
  57 0022 FFF7FEFF 		bl	send_data
  32:../Sources/main.c **** 		delay_time(SLOW_BLINK);
  58              		.loc 1 32 0
  59 0026 0A4B     		ldr	r3, .L3+4
  60 0028 181C     		mov	r0, r3
  61 002a FFF7FEFF 		bl	delay_time
  33:../Sources/main.c **** 		send_data(2);
  62              		.loc 1 33 0
  63 002e 0220     		mov	r0, #2
  64 0030 FFF7FEFF 		bl	send_data
  34:../Sources/main.c **** 		delay_time(SLOW_BLINK);
  65              		.loc 1 34 0
  66 0034 064B     		ldr	r3, .L3+4
  67 0036 181C     		mov	r0, r3
  68 0038 FFF7FEFF 		bl	delay_time
  35:../Sources/main.c **** 		send_data(3);
  69              		.loc 1 35 0
  70 003c 0320     		mov	r0, #3
  71 003e FFF7FEFF 		bl	send_data
  36:../Sources/main.c **** 		delay_time(SLOW_BLINK);
  72              		.loc 1 36 0
  73 0042 034B     		ldr	r3, .L3+4
  74 0044 181C     		mov	r0, r3
  75 0046 FFF7FEFF 		bl	delay_time
  37:../Sources/main.c **** 	}
  76              		.loc 1 37 0
  77 004a E9E7     		b	.L2
  78              	.L4:
  79              		.align	2
  80              	.L3:
  81 004c 40F00F40 		.word	1074786368
  82 0050 80969800 		.word	10000000
  83              		.cfi_endproc
  84              	.LFE0:
  86              		.section	.text.delay_time,"ax",%progbits
  87              		.align	2
  88              		.global	delay_time
  89              		.code	16
  90              		.thumb_func
  92              	delay_time:
  93              	.LFB1:
  38:../Sources/main.c **** }
  39:../Sources/main.c **** 
  40:../Sources/main.c **** void delay_time(int number){
  94              		.loc 1 40 0
  95              		.cfi_startproc
  96 0000 80B5     		push	{r7, lr}
  97              	.LCFI3:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 7, -8
 100              		.cfi_offset 14, -4
 101 0002 84B0     		sub	sp, sp, #16
 102              	.LCFI4:
 103              		.cfi_def_cfa_offset 24
 104 0004 00AF     		add	r7, sp, #0
 105              	.LCFI5:
 106              		.cfi_def_cfa_register 7
 107 0006 7860     		str	r0, [r7, #4]
  41:../Sources/main.c **** 	int cnt;
  42:../Sources/main.c **** 	for(cnt=0;cnt<number;cnt++);
 108              		.loc 1 42 0
 109 0008 0023     		mov	r3, #0
 110 000a FB60     		str	r3, [r7, #12]
 111 000c 02E0     		b	.L6
 112              	.L7:
 113              		.loc 1 42 0 is_stmt 0
 114 000e FB68     		ldr	r3, [r7, #12]
 115 0010 0133     		add	r3, r3, #1
 116 0012 FB60     		str	r3, [r7, #12]
 117              	.L6:
 118              		.loc 1 42 0
 119 0014 FA68     		ldr	r2, [r7, #12]
 120 0016 7B68     		ldr	r3, [r7, #4]
 121 0018 9A42     		cmp	r2, r3
 122 001a F8DB     		blt	.L7
  43:../Sources/main.c **** }
 123              		.loc 1 43 0 is_stmt 1
 124 001c BD46     		mov	sp, r7
 125 001e 04B0     		add	sp, sp, #16
 126              		@ sp needed for prologue
 127 0020 80BD     		pop	{r7, pc}
 128              		.cfi_endproc
 129              	.LFE1:
 131 0022 C046     		.section	.text.clock_init,"ax",%progbits
 132              		.align	2
 133              		.global	clock_init
 134              		.code	16
 135              		.thumb_func
 137              	clock_init:
 138              	.LFB2:
  44:../Sources/main.c **** 
  45:../Sources/main.c **** 
  46:../Sources/main.c **** void clock_init(){
 139              		.loc 1 46 0
 140              		.cfi_startproc
 141 0000 80B5     		push	{r7, lr}
 142              	.LCFI6:
 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 7, -8
 145              		.cfi_offset 14, -4
 146 0002 84B0     		sub	sp, sp, #16
 147              	.LCFI7:
 148              		.cfi_def_cfa_offset 24
 149 0004 00AF     		add	r7, sp, #0
 150              	.LCFI8:
 151              		.cfi_def_cfa_register 7
  47:../Sources/main.c **** 	MCG_C2 = (MCG_C2_RANGE0(1) | MCG_C2_EREFS0_MASK); 	// configure the oscillator settings
 152              		.loc 1 47 0
 153 0006 294B     		ldr	r3, .L15
 154 0008 1422     		mov	r2, #20
 155 000a 5A70     		strb	r2, [r3, #1]
  48:../Sources/main.c **** 	MCG_C1 = (MCG_C1_CLKS(2) | MCG_C1_FRDIV(3));		// divider for 8 MHz clock	
 156              		.loc 1 48 0
 157 000c 274B     		ldr	r3, .L15
 158 000e 9822     		mov	r2, #152
 159 0010 1A70     		strb	r2, [r3]
 160              	.LBB2:
  49:../Sources/main.c **** 	for (int i = 0 ; i < 24000 ; i++);						// wait for OSCINIT to set
 161              		.loc 1 49 0
 162 0012 0023     		mov	r3, #0
 163 0014 FB60     		str	r3, [r7, #12]
 164 0016 02E0     		b	.L9
 165              	.L10:
 166              		.loc 1 49 0 is_stmt 0
 167 0018 FB68     		ldr	r3, [r7, #12]
 168 001a 0133     		add	r3, r3, #1
 169 001c FB60     		str	r3, [r7, #12]
 170              	.L9:
 171              		.loc 1 49 0
 172 001e FA68     		ldr	r2, [r7, #12]
 173 0020 234B     		ldr	r3, .L15+4
 174 0022 9A42     		cmp	r2, r3
 175 0024 F8DD     		ble	.L10
 176              	.LBE2:
  50:../Sources/main.c **** 		// now in FBE mode
  51:../Sources/main.c **** 		MCG_C6 |= MCG_C6_CME0_MASK;		// enable the clock monitor
 177              		.loc 1 51 0 is_stmt 1
 178 0026 214B     		ldr	r3, .L15
 179 0028 204A     		ldr	r2, .L15
 180 002a 5279     		ldrb	r2, [r2, #5]
 181 002c D2B2     		uxtb	r2, r2
 182 002e 2021     		mov	r1, #32
 183 0030 0A43     		orr	r2, r1
 184 0032 D2B2     		uxtb	r2, r2
 185 0034 5A71     		strb	r2, [r3, #5]
  52:../Sources/main.c **** 	MCG_C5 |= MCG_C5_PRDIV0(1); 	// set PLL ref divider to divide by 2
 186              		.loc 1 52 0
 187 0036 1D4B     		ldr	r3, .L15
 188 0038 1C4A     		ldr	r2, .L15
 189 003a 1279     		ldrb	r2, [r2, #4]
 190 003c D2B2     		uxtb	r2, r2
 191 003e 0121     		mov	r1, #1
 192 0040 0A43     		orr	r2, r1
 193 0042 D2B2     		uxtb	r2, r2
 194 0044 1A71     		strb	r2, [r3, #4]
  53:../Sources/main.c **** 	int temp_reg = MCG_C6; 				// store present C6 value (as CME0 bit was previously set)
 195              		.loc 1 53 0
 196 0046 194B     		ldr	r3, .L15
 197 0048 5B79     		ldrb	r3, [r3, #5]
 198 004a DBB2     		uxtb	r3, r3
 199 004c 3B60     		str	r3, [r7]
  54:../Sources/main.c **** 	temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 200              		.loc 1 54 0
 201 004e 3B68     		ldr	r3, [r7]
 202 0050 1F22     		mov	r2, #31
 203 0052 9343     		bic	r3, r2
 204 0054 3B60     		str	r3, [r7]
  55:../Sources/main.c **** 	temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0); 	// write new VDIV and enable PLL
 205              		.loc 1 55 0
 206 0056 3B68     		ldr	r3, [r7]
 207 0058 4022     		mov	r2, #64
 208 005a 1343     		orr	r3, r2
 209 005c 3B60     		str	r3, [r7]
  56:../Sources/main.c **** 	MCG_C6 = temp_reg; 				// update MCG_C6		
 210              		.loc 1 56 0
 211 005e 134B     		ldr	r3, .L15
 212 0060 3A68     		ldr	r2, [r7]
 213 0062 D2B2     		uxtb	r2, r2
 214 0064 5A71     		strb	r2, [r3, #5]
 215              	.LBB3:
  57:../Sources/main.c **** 	for (int i = 0 ; i < 4000 ; i++); 	// wait for PLLST status bit to set
 216              		.loc 1 57 0
 217 0066 0023     		mov	r3, #0
 218 0068 BB60     		str	r3, [r7, #8]
 219 006a 02E0     		b	.L11
 220              	.L12:
 221              		.loc 1 57 0 is_stmt 0
 222 006c BB68     		ldr	r3, [r7, #8]
 223 006e 0133     		add	r3, r3, #1
 224 0070 BB60     		str	r3, [r7, #8]
 225              	.L11:
 226              		.loc 1 57 0
 227 0072 BA68     		ldr	r2, [r7, #8]
 228 0074 0F4B     		ldr	r3, .L15+8
 229 0076 9A42     		cmp	r2, r3
 230 0078 F8DD     		ble	.L12
 231              	.LBE3:
  58:../Sources/main.c **** 		// now in PBE mode
  59:../Sources/main.c **** 		SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(1) | SIM_CLKDIV1_OUTDIV4(1));	// core clock, bus clock div by 
 232              		.loc 1 59 0 is_stmt 1
 233 007a 0F4A     		ldr	r2, .L15+12
 234 007c 0F4B     		ldr	r3, .L15+16
 235 007e 1049     		ldr	r1, .L15+20
 236 0080 D150     		str	r1, [r2, r3]
  60:../Sources/main.c **** 	MCG_C1 &= ~MCG_C1_CLKS_MASK;	// switch CLKS mux to select the PLL as MCGCLKOUT	
 237              		.loc 1 60 0
 238 0082 0A4B     		ldr	r3, .L15
 239 0084 094A     		ldr	r2, .L15
 240 0086 1278     		ldrb	r2, [r2]
 241 0088 D1B2     		uxtb	r1, r2
 242 008a 3F22     		mov	r2, #63
 243 008c 0A40     		and	r2, r1
 244 008e D2B2     		uxtb	r2, r2
 245 0090 1A70     		strb	r2, [r3]
 246              	.LBB4:
  61:../Sources/main.c **** 	for (int i = 0 ; i < 2000 ; i++);	// Wait for clock status bits to update
 247              		.loc 1 61 0
 248 0092 0023     		mov	r3, #0
 249 0094 7B60     		str	r3, [r7, #4]
 250 0096 02E0     		b	.L13
 251              	.L14:
 252              		.loc 1 61 0 is_stmt 0
 253 0098 7B68     		ldr	r3, [r7, #4]
 254 009a 0133     		add	r3, r3, #1
 255 009c 7B60     		str	r3, [r7, #4]
 256              	.L13:
 257              		.loc 1 61 0
 258 009e 7A68     		ldr	r2, [r7, #4]
 259 00a0 084B     		ldr	r3, .L15+24
 260 00a2 9A42     		cmp	r2, r3
 261 00a4 F8DD     		ble	.L14
 262              	.LBE4:
  62:../Sources/main.c **** 	// now in PEE mode, core and system clock 48 MHz, bus and flash clock 24 MHz
  63:../Sources/main.c **** 
  64:../Sources/main.c **** }
 263              		.loc 1 64 0 is_stmt 1
 264 00a6 BD46     		mov	sp, r7
 265 00a8 04B0     		add	sp, sp, #16
 266              		@ sp needed for prologue
 267 00aa 80BD     		pop	{r7, pc}
 268              	.L16:
 269              		.align	2
 270              	.L15:
 271 00ac 00400640 		.word	1074151424
 272 00b0 BF5D0000 		.word	23999
 273 00b4 9F0F0000 		.word	3999
 274 00b8 00700440 		.word	1074032640
 275 00bc 44100000 		.word	4164
 276 00c0 00000110 		.word	268500992
 277 00c4 CF070000 		.word	1999
 278              		.cfi_endproc
 279              	.LFE2:
 281              		.text
 282              	.Letext0:
 283              		.file 2 "D:/UtilisateurTZ/Program Files (x86)/CodeWarrior/CW MCU v11.1/MCU/ARM_GCC_Support/ewl/EWL
 284              		.file 3 "D:/T\351l\351chargements/NXP_CUP/insa-nxpcup/code/2019-2020/periphs/test/Project_Headers/
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\thoma\AppData\Local\Temp\ccThkN3c.s:18     .text.main:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccThkN3c.s:23     .text.main:00000000 main
C:\Users\thoma\AppData\Local\Temp\ccThkN3c.s:137    .text.clock_init:00000000 clock_init
C:\Users\thoma\AppData\Local\Temp\ccThkN3c.s:92     .text.delay_time:00000000 delay_time
C:\Users\thoma\AppData\Local\Temp\ccThkN3c.s:81     .text.main:0000004c $d
C:\Users\thoma\AppData\Local\Temp\ccThkN3c.s:87     .text.delay_time:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccThkN3c.s:132    .text.clock_init:00000000 $t
C:\Users\thoma\AppData\Local\Temp\ccThkN3c.s:271    .text.clock_init:000000ac $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
debug_init
send_data
